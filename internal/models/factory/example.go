// Code generated by BobGen psql v0.26.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"net"

	"github.com/aarondl/opt/omit"
	models "github.com/d0zer11st/bobexample/internal/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type ExampleMod interface {
	Apply(*ExampleTemplate)
}

type ExampleModFunc func(*ExampleTemplate)

func (f ExampleModFunc) Apply(n *ExampleTemplate) {
	f(n)
}

type ExampleModSlice []ExampleMod

func (mods ExampleModSlice) Apply(n *ExampleTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ExampleTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ExampleTemplate struct {
	ID  func() int64
	Mac func() types.Stringer[net.HardwareAddr]

	f *Factory
}

// Apply mods to the ExampleTemplate
func (o *ExampleTemplate) Apply(mods ...ExampleMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Example
// this does nothing with the relationship templates
func (o ExampleTemplate) toModel() *models.Example {
	m := &models.Example{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Mac != nil {
		m.Mac = o.Mac()
	}

	return m
}

// toModels returns an models.ExampleSlice
// this does nothing with the relationship templates
func (o ExampleTemplate) toModels(number int) models.ExampleSlice {
	m := make(models.ExampleSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Example
// according to the relationships in the template. Nothing is inserted into the db
func (t ExampleTemplate) setModelRels(o *models.Example) {}

// BuildSetter returns an *models.ExampleSetter
// this does nothing with the relationship templates
func (o ExampleTemplate) BuildSetter() *models.ExampleSetter {
	m := &models.ExampleSetter{}

	if o.Mac != nil {
		m.Mac = omit.From(o.Mac())
	}

	return m
}

// BuildManySetter returns an []*models.ExampleSetter
// this does nothing with the relationship templates
func (o ExampleTemplate) BuildManySetter(number int) []*models.ExampleSetter {
	m := make([]*models.ExampleSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Example
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ExampleTemplate.Create
func (o ExampleTemplate) Build() *models.Example {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ExampleSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ExampleTemplate.CreateMany
func (o ExampleTemplate) BuildMany(number int) models.ExampleSlice {
	m := make(models.ExampleSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableExample(m *models.ExampleSetter) {
	if m.Mac.IsUnset() {
		m.Mac = omit.From(random[types.Stringer[net.HardwareAddr]](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Example
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ExampleTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Example) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a example and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ExampleTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Example, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a example and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ExampleTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Example, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableExample(opt)

	m, err := models.Examples.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = exampleCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple examples and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ExampleTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ExampleSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple examples and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ExampleTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ExampleSlice, error) {
	var err error
	m := make(models.ExampleSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Example has methods that act as mods for the ExampleTemplate
var ExampleMods exampleMods

type exampleMods struct{}

func (m exampleMods) RandomizeAllColumns(f *faker.Faker) ExampleMod {
	return ExampleModSlice{
		ExampleMods.RandomID(f),
		ExampleMods.RandomMac(f),
	}
}

// Set the model columns to this value
func (m exampleMods) ID(val int64) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m exampleMods) IDFunc(f func() int64) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m exampleMods) UnsetID() ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m exampleMods) RandomID(f *faker.Faker) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m exampleMods) ensureID(f *faker.Faker) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m exampleMods) Mac(val types.Stringer[net.HardwareAddr]) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.Mac = func() types.Stringer[net.HardwareAddr] { return val }
	})
}

// Set the Column from the function
func (m exampleMods) MacFunc(f func() types.Stringer[net.HardwareAddr]) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.Mac = f
	})
}

// Clear any values for the column
func (m exampleMods) UnsetMac() ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.Mac = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m exampleMods) RandomMac(f *faker.Faker) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		o.Mac = func() types.Stringer[net.HardwareAddr] {
			return random[types.Stringer[net.HardwareAddr]](f)
		}
	})
}

func (m exampleMods) ensureMac(f *faker.Faker) ExampleMod {
	return ExampleModFunc(func(o *ExampleTemplate) {
		if o.Mac != nil {
			return
		}

		o.Mac = func() types.Stringer[net.HardwareAddr] {
			return random[types.Stringer[net.HardwareAddr]](f)
		}
	})
}
