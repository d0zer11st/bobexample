// Code generated by BobGen psql v0.26.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"net"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types"
)

// Example is an object representing the database table.
type Example struct {
	ID  int64                            `db:"id,pk,generated" `
	Mac types.Stringer[net.HardwareAddr] `db:"mac" `
}

// ExampleSlice is an alias for a slice of pointers to Example.
// This should almost always be used instead of []*Example.
type ExampleSlice []*Example

// Examples contains methods to work with the example table
var Examples = psql.NewTablex[*Example, ExampleSlice, *ExampleSetter]("", "example")

// ExamplesQuery is a query on the example table
type ExamplesQuery = *psql.ViewQuery[*Example, ExampleSlice]

// ExamplesStmt is a prepared statment on example
type ExamplesStmt = bob.QueryStmt[*Example, ExampleSlice]

// ExampleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ExampleSetter struct {
	Mac omit.Val[types.Stringer[net.HardwareAddr]] `db:"mac"`
}

func (s ExampleSetter) SetColumns() []string {
	vals := make([]string, 0, 1)
	if !s.Mac.IsUnset() {
		vals = append(vals, "mac")
	}

	return vals
}

func (s ExampleSetter) Overwrite(t *Example) {
	if !s.Mac.IsUnset() {
		t.Mac, _ = s.Mac.Get()
	}
}

func (s ExampleSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 1)
	if s.Mac.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Mac)
	}

	return im.Values(vals...)
}

func (s ExampleSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s ExampleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 1)

	if !s.Mac.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "mac")...),
			psql.Arg(s.Mac),
		}})
	}

	return exprs
}

type exampleColumnNames struct {
	ID  string
	Mac string
}

var ExampleColumns = struct {
	ID  psql.Expression
	Mac psql.Expression
}{
	ID:  psql.Quote("example", "id"),
	Mac: psql.Quote("example", "mac"),
}

type exampleWhere[Q psql.Filterable] struct {
	ID  psql.WhereMod[Q, int64]
	Mac psql.WhereMod[Q, types.Stringer[net.HardwareAddr]]
}

func ExampleWhere[Q psql.Filterable]() exampleWhere[Q] {
	return exampleWhere[Q]{
		ID:  psql.Where[Q, int64](ExampleColumns.ID),
		Mac: psql.Where[Q, types.Stringer[net.HardwareAddr]](ExampleColumns.Mac),
	}
}

// FindExample retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindExample(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Example, error) {
	if len(cols) == 0 {
		return Examples.Query(
			ctx, exec,
			SelectWhere.Examples.ID.EQ(IDPK),
		).One()
	}

	return Examples.Query(
		ctx, exec,
		SelectWhere.Examples.ID.EQ(IDPK),
		sm.Columns(Examples.Columns().Only(cols...)),
	).One()
}

// ExampleExists checks the presence of a single record by primary key
func ExampleExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Examples.Query(
		ctx, exec,
		SelectWhere.Examples.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Example
func (o *Example) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

// Update uses an executor to update the Example
func (o *Example) Update(ctx context.Context, exec bob.Executor, s *ExampleSetter) error {
	return Examples.Update(ctx, exec, s, o)
}

// Delete deletes a single Example record with an executor
func (o *Example) Delete(ctx context.Context, exec bob.Executor) error {
	return Examples.Delete(ctx, exec, o)
}

// Reload refreshes the Example using the executor
func (o *Example) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Examples.Query(
		ctx, exec,
		SelectWhere.Examples.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o ExampleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ExampleSetter) error {
	return Examples.Update(ctx, exec, &vals, o...)
}

func (o ExampleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Examples.Delete(ctx, exec, o...)
}

func (o ExampleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Examples.ID.In(IDPK...),
	)

	o2, err := Examples.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
